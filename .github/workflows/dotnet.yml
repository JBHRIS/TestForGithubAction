# This workflow will build a .NET project and deploy to Azure VM IIS
name: .NET CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release
      
    - name: Publish
      run: dotnet publish --no-build --configuration Release --output ./publish
      
    - name: Install Web Deploy
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        # Download and install Web Deploy
        $webDeployUrl = "https://download.microsoft.com/download/0/1/D/01DC28EA-638C-4A22-A57B-4CEF97755C6C/WebDeploy_amd64_en-US.msi"
        $webDeployPath = "$env:TEMP\WebDeploy_amd64_en-US.msi"
        
        Write-Host "Downloading Web Deploy..."
        Invoke-WebRequest -Uri $webDeployUrl -OutFile $webDeployPath
        
        Write-Host "Installing Web Deploy..."
        Start-Process msiexec.exe -ArgumentList "/i", $webDeployPath, "/quiet", "/norestart" -Wait
        
        # Wait for installation to complete
        Start-Sleep -Seconds 10
        
        Write-Host "Web Deploy installation completed"
      shell: powershell
      
    - name: Deploy to Azure VM IIS
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        # Set deployment parameters
        $publishPath = ".\publish"
        $serverUrl = "${{ secrets.AZURE_VM_HOST }}"
        $siteName = "${{ secrets.IIS_SITE_PATH }}"
        $username = "${{ secrets.AZURE_VM_USERNAME }}"
        $password = "${{ secrets.AZURE_VM_PASSWORD }}"
        
        # Check if MSDeploy exists
        $msdeployPath = "C:\Program Files\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        if (-not (Test-Path $msdeployPath)) {
            $msdeployPath = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe"
        }
        
        if (-not (Test-Path $msdeployPath)) {
            Write-Error "MSDeploy.exe not found"
            exit 1
        }
        
        Write-Host "Using MSDeploy path: $msdeployPath"
        Write-Host "Deploy source: $publishPath"
        Write-Host "Deploy target: $siteName"
        Write-Host "Server: $serverUrl"
        
        # Execute deployment using the same format as your working publish profile
        $deployCommand = @(
            "-verb:sync"
            "-source:iisApp=`"$publishPath`""
            "-dest:iisApp=`"$siteName`",computerName=`"https://$serverUrl:8172/msdeploy.axd`",userName=`"$username`",password=`"$password`",authType=`"Basic`""
            "-allowUntrusted"
            "-enableRule:DoNotDeleteRule"
            "-skip:Directory=`"\\App_Data`""
            "-retryAttempts:3"
            "-retryInterval:5000"
            "-verbose"
        )
        
        Write-Host "Executing MSDeploy command..."
        & $msdeployPath $deployCommand
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Deployment failed with exit code: $LASTEXITCODE"
            
            # Try alternative approach - use contentPath
            Write-Host "Trying alternative deployment method..."
            $deployCommand2 = @(
                "-verb:sync"
                "-source:contentPath=`"$publishPath`""
                "-dest:contentPath=`"$siteName`",computerName=`"https://$serverUrl:8172/msdeploy.axd`",userName=`"$username`",password=`"$password`",authType=`"Basic`""
                "-allowUntrusted"
                "-retryAttempts:2"
                "-verbose"
            )
            
            & $msdeployPath $deployCommand2
            
            if ($LASTEXITCODE -ne 0) {
                Write-Error "Both deployment methods failed"
                exit 1
            }
        }
        
        Write-Host "Deployment completed successfully!"
      shell: powershell
      
    - name: Deployment Summary
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        echo "Deployment completed successfully!"
        echo "Website URL: http://${{ secrets.AZURE_VM_HOST }}/App/Test/TestForGithubAction"
        echo "Deploy path: ${{ secrets.IIS_SITE_PATH }}"
      shell: powershell
